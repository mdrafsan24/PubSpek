//
//  ProgressBar.swift
//
//  Created on 6/3/17.
//
//  Generated by PaintCode Plugin for Sketch
//  http://www.paintcodeapp.com/sketch
//

import UIKit

class ProgressBar: NSObject {

    //MARK: - Canvas Drawings
    
    /// Page 1
    class func drawArtboard(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 180, height: 180), resizing: ResizingBehavior = .aspectFit, progress: Int) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 180, height: 180), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 180, y: resizedFrame.height / 180)
        
        /// Background Color
        UIColor(hue: 0.592, saturation: 0.286, brightness: 0.275, alpha: 1).setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// ipercent copy
        do {
            context.saveGState()
            context.translateBy(x: 90, y: 92)
            context.rotate(by: 370 * CGFloat.pi/180)
            context.translateBy(x: -101, y: -101)
            
            /// bar
            do {
                context.saveGState()
                
                /// Oval 118 Copy 3
                let oval118Copy3 = UIBezierPath()
                oval118Copy3.move(to: CGPoint(x: 71.03, y: 142.05))
                oval118Copy3.addCurve(to: CGPoint(x: 142.05, y: 71.03), controlPoint1: CGPoint(x: 110.25, y: 142.05), controlPoint2: CGPoint(x: 142.05, y: 110.25))
                oval118Copy3.addCurve(to: CGPoint(x: 71.03, y: 0), controlPoint1: CGPoint(x: 142.05, y: 31.8), controlPoint2: CGPoint(x: 110.25, y: 0))
                oval118Copy3.addCurve(to: CGPoint(x: 0, y: 71.03), controlPoint1: CGPoint(x: 31.8, y: 0), controlPoint2: CGPoint(x: 0, y: 31.8))
                oval118Copy3.addCurve(to: CGPoint(x: 71.03, y: 142.05), controlPoint1: CGPoint(x: 0, y: 110.25), controlPoint2: CGPoint(x: 31.8, y: 142.05))
                oval118Copy3.close()
                oval118Copy3.move(to: CGPoint(x: 71.03, y: 142.05))
                context.saveGState()
                context.translateBy(x: 101.03, y: 101.03)
                context.rotate(by: 48 * CGFloat.pi/180)
                context.translateBy(x: -71.03, y: -71.03)
                oval118Copy3.lineCapStyle = .round
                oval118Copy3.setLineDash([28, 90, 391], count: 3, phase: 0)
                oval118Copy3.lineWidth = 6
                UIColor(hue: 0.594, saturation: 0.137, brightness: 0.859, alpha: 0.3).setStroke()
                oval118Copy3.stroke()
                context.restoreGState()
                
                /// Oval 118
                let oval118 = UIBezierPath()
                oval118.move(to: CGPoint(x: 71.03, y: 142.05))
                oval118.addCurve(to: CGPoint(x: 142.05, y: 71.03), controlPoint1: CGPoint(x: 110.25, y: 142.05), controlPoint2: CGPoint(x: 142.05, y: 110.25))
                oval118.addCurve(to: CGPoint(x: 71.03, y: 0), controlPoint1: CGPoint(x: 142.05, y: 31.8), controlPoint2: CGPoint(x: 110.25, y: 0))
                oval118.addCurve(to: CGPoint(x: 0, y: 71.03), controlPoint1: CGPoint(x: 31.8, y: 0), controlPoint2: CGPoint(x: 0, y: 31.8))
                oval118.addCurve(to: CGPoint(x: 71.03, y: 142.05), controlPoint1: CGPoint(x: 0, y: 110.25), controlPoint2: CGPoint(x: 31.8, y: 142.05))
                oval118.close()
                oval118.move(to: CGPoint(x: 71.03, y: 142.05))
                context.saveGState()
                context.translateBy(x: 101.03, y: 101.03)
                context.rotate(by: 47 * CGFloat.pi/180)
                context.translateBy(x: -71.03, y: -71.03)
                oval118.lineCapStyle = .round
                oval118.setLineDash([28, 89, 391], count: 3, phase: 0)
                context.saveGState()
                oval118.lineWidth = 6
                context.beginPath()
                context.addPath(oval118.cgPath)
                context.setLineWidth(oval118.lineWidth)
                context.setLineCap(oval118.lineCapStyle)
                context.setLineJoin(oval118.lineJoinStyle)
                context.setMiterLimit(oval118.miterLimit)
                // Change this
                let progressBarPercentColoring = (-4.1375*Double(progress)) + 502.75
                context.setLineDash(phase: 0, lengths: [28, CGFloat(progressBarPercentColoring), 391])
                context.replacePathWithStrokedPath()
                context.clip()
                context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                            UIColor(hue: 0.556, saturation: 0.894, brightness: 0.905, alpha: 1).cgColor,
                            UIColor(hue: 0.511, saturation: 0.496, brightness: 0.91, alpha: 1).cgColor,
                        ] as CFArray, locations: [0, 1])!,
                    start: CGPoint(x: 107.77, y: 14.35),
                    end: CGPoint(x: 57.24, y: 94.36),
                    options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
                context.restoreGState()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        /// 100
        let _100 = NSMutableAttributedString(string: "\(progress)")
        _100.addAttribute(NSFontAttributeName, value: UIFont(name: "AvenirNext-Bold", size: 36)!, range: NSRange(location: 0, length: _100.length))
        _100.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: _100.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            _100.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: _100.length))
        }
        context.saveGState()
        context.setBlendMode(.lighten)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            // Change this
            if (progress == 100) {
                _100.draw(at: CGPoint(x: 55, y: 65))
            } else {
                _100.draw(at: CGPoint(x: 67, y: 65))
            }
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    
    //MARK: - Canvas Images
    
    /// Page 1
    /*
    class func imageOfArtboard() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 180, height: 180), false, 0)
        ProgressBar.drawArtboard()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    */
    
    //MARK: - Resizing Behavior
    
    enum ResizingBehavior {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.
        
        func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }
            
            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)
            
            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }
            
            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
    
    
}
